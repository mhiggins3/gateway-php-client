<?php
/**
 * BookingSearch
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * External Gateway API
 *
 * External Gateway API - This API provides the ability for Xplorie to find availability of attractions, to place a booking, reteieve a booking and cancel a booking with RMS provides via a common API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: mark@datapointpartners.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * BookingSearch Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class BookingSearch implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BookingSearch';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'rms_code' => 'string',
        'booking_id' => 'string',
        'reference_id' => 'string',
        'company_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'rms_code' => null,
        'booking_id' => null,
        'reference_id' => null,
        'company_name' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'rms_code' => 'rmsCode',
        'booking_id' => 'bookingId',
        'reference_id' => 'referenceId',
        'company_name' => 'companyName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'rms_code' => 'setRmsCode',
        'booking_id' => 'setBookingId',
        'reference_id' => 'setReferenceId',
        'company_name' => 'setCompanyName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'rms_code' => 'getRmsCode',
        'booking_id' => 'getBookingId',
        'reference_id' => 'getReferenceId',
        'company_name' => 'getCompanyName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const RMS_CODE_FAIR_HARBOR = 'fair-harbor';
    const RMS_CODE_BOOKEO = 'bookeo';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRmsCodeAllowableValues()
    {
        return [
            self::RMS_CODE_FAIR_HARBOR,
            self::RMS_CODE_BOOKEO,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['rms_code'] = isset($data['rms_code']) ? $data['rms_code'] : null;
        $this->container['booking_id'] = isset($data['booking_id']) ? $data['booking_id'] : null;
        $this->container['reference_id'] = isset($data['reference_id']) ? $data['reference_id'] : null;
        $this->container['company_name'] = isset($data['company_name']) ? $data['company_name'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['rms_code'] === null) {
            $invalidProperties[] = "'rms_code' can't be null";
        }
        $allowedValues = $this->getRmsCodeAllowableValues();
        if (!is_null($this->container['rms_code']) && !in_array($this->container['rms_code'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'rms_code', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['booking_id'] === null) {
            $invalidProperties[] = "'booking_id' can't be null";
        }
        if ($this->container['reference_id'] === null) {
            $invalidProperties[] = "'reference_id' can't be null";
        }
        if ($this->container['company_name'] === null) {
            $invalidProperties[] = "'company_name' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets rms_code
     *
     * @return string
     */
    public function getRmsCode()
    {
        return $this->container['rms_code'];
    }

    /**
     * Sets rms_code
     *
     * @param string $rms_code Internal rms code to identify which rms to send request to
     *
     * @return $this
     */
    public function setRmsCode($rms_code)
    {
        $allowedValues = $this->getRmsCodeAllowableValues();
        if (!in_array($rms_code, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'rms_code', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['rms_code'] = $rms_code;

        return $this;
    }

    /**
     * Gets booking_id
     *
     * @return string
     */
    public function getBookingId()
    {
        return $this->container['booking_id'];
    }

    /**
     * Sets booking_id
     *
     * @param string $booking_id Unique identifier of the booking
     *
     * @return $this
     */
    public function setBookingId($booking_id)
    {
        $this->container['booking_id'] = $booking_id;

        return $this;
    }

    /**
     * Gets reference_id
     *
     * @return string
     */
    public function getReferenceId()
    {
        return $this->container['reference_id'];
    }

    /**
     * Sets reference_id
     *
     * @param string $reference_id A unique identifier for the booking, created by the gateway
     *
     * @return $this
     */
    public function setReferenceId($reference_id)
    {
        $this->container['reference_id'] = $reference_id;

        return $this;
    }

    /**
     * Gets company_name
     *
     * @return string
     */
    public function getCompanyName()
    {
        return $this->container['company_name'];
    }

    /**
     * Sets company_name
     *
     * @param string $company_name rms specific company identifier name
     *
     * @return $this
     */
    public function setCompanyName($company_name)
    {
        $this->container['company_name'] = $company_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



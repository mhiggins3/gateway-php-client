<?php
/**
 * Booking
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * External Gateway API
 *
 * External Gateway API - This API provides the ability for Xplorie to find availability of attractions, to place a booking, reteieve a booking and cancel a booking with RMS provides via a common API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: mark@datapointpartners.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Booking Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Booking implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Booking';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'rms_code' => 'string',
        'booking_id' => 'string',
        'reference_id' => 'string',
        'customer_contact' => '\OpenAPI\Client\Model\Contact',
        'customer_types_required' => '\OpenAPI\Client\Model\BookingCustomerType[]',
        'availability' => '\OpenAPI\Client\Model\Availability',
        'price' => '\OpenAPI\Client\Model\Price',
        'status' => 'string',
        'confirmation_url' => 'string',
        'booking_info' => 'map[string,string]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'rms_code' => null,
        'booking_id' => null,
        'reference_id' => null,
        'customer_contact' => null,
        'customer_types_required' => null,
        'availability' => null,
        'price' => null,
        'status' => null,
        'confirmation_url' => null,
        'booking_info' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'rms_code' => 'rmsCode',
        'booking_id' => 'bookingId',
        'reference_id' => 'referenceId',
        'customer_contact' => 'customerContact',
        'customer_types_required' => 'customerTypesRequired',
        'availability' => 'availability',
        'price' => 'price',
        'status' => 'status',
        'confirmation_url' => 'confirmationUrl',
        'booking_info' => 'bookingInfo'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'rms_code' => 'setRmsCode',
        'booking_id' => 'setBookingId',
        'reference_id' => 'setReferenceId',
        'customer_contact' => 'setCustomerContact',
        'customer_types_required' => 'setCustomerTypesRequired',
        'availability' => 'setAvailability',
        'price' => 'setPrice',
        'status' => 'setStatus',
        'confirmation_url' => 'setConfirmationUrl',
        'booking_info' => 'setBookingInfo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'rms_code' => 'getRmsCode',
        'booking_id' => 'getBookingId',
        'reference_id' => 'getReferenceId',
        'customer_contact' => 'getCustomerContact',
        'customer_types_required' => 'getCustomerTypesRequired',
        'availability' => 'getAvailability',
        'price' => 'getPrice',
        'status' => 'getStatus',
        'confirmation_url' => 'getConfirmationUrl',
        'booking_info' => 'getBookingInfo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['rms_code'] = isset($data['rms_code']) ? $data['rms_code'] : null;
        $this->container['booking_id'] = isset($data['booking_id']) ? $data['booking_id'] : null;
        $this->container['reference_id'] = isset($data['reference_id']) ? $data['reference_id'] : null;
        $this->container['customer_contact'] = isset($data['customer_contact']) ? $data['customer_contact'] : null;
        $this->container['customer_types_required'] = isset($data['customer_types_required']) ? $data['customer_types_required'] : null;
        $this->container['availability'] = isset($data['availability']) ? $data['availability'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['confirmation_url'] = isset($data['confirmation_url']) ? $data['confirmation_url'] : null;
        $this->container['booking_info'] = isset($data['booking_info']) ? $data['booking_info'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['rms_code'] === null) {
            $invalidProperties[] = "'rms_code' can't be null";
        }
        if ($this->container['booking_id'] === null) {
            $invalidProperties[] = "'booking_id' can't be null";
        }
        if ($this->container['reference_id'] === null) {
            $invalidProperties[] = "'reference_id' can't be null";
        }
        if ($this->container['customer_contact'] === null) {
            $invalidProperties[] = "'customer_contact' can't be null";
        }
        if ($this->container['customer_types_required'] === null) {
            $invalidProperties[] = "'customer_types_required' can't be null";
        }
        if ($this->container['availability'] === null) {
            $invalidProperties[] = "'availability' can't be null";
        }
        if ($this->container['price'] === null) {
            $invalidProperties[] = "'price' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets rms_code
     *
     * @return string
     */
    public function getRmsCode()
    {
        return $this->container['rms_code'];
    }

    /**
     * Sets rms_code
     *
     * @param string $rms_code rms_code
     *
     * @return $this
     */
    public function setRmsCode($rms_code)
    {
        $this->container['rms_code'] = $rms_code;

        return $this;
    }

    /**
     * Gets booking_id
     *
     * @return string
     */
    public function getBookingId()
    {
        return $this->container['booking_id'];
    }

    /**
     * Sets booking_id
     *
     * @param string $booking_id Unique identifier of the booking
     *
     * @return $this
     */
    public function setBookingId($booking_id)
    {
        $this->container['booking_id'] = $booking_id;

        return $this;
    }

    /**
     * Gets reference_id
     *
     * @return string
     */
    public function getReferenceId()
    {
        return $this->container['reference_id'];
    }

    /**
     * Sets reference_id
     *
     * @param string $reference_id A unique identifier for the booking, created by the gateway
     *
     * @return $this
     */
    public function setReferenceId($reference_id)
    {
        $this->container['reference_id'] = $reference_id;

        return $this;
    }

    /**
     * Gets customer_contact
     *
     * @return \OpenAPI\Client\Model\Contact
     */
    public function getCustomerContact()
    {
        return $this->container['customer_contact'];
    }

    /**
     * Sets customer_contact
     *
     * @param \OpenAPI\Client\Model\Contact $customer_contact customer_contact
     *
     * @return $this
     */
    public function setCustomerContact($customer_contact)
    {
        $this->container['customer_contact'] = $customer_contact;

        return $this;
    }

    /**
     * Gets customer_types_required
     *
     * @return \OpenAPI\Client\Model\BookingCustomerType[]
     */
    public function getCustomerTypesRequired()
    {
        return $this->container['customer_types_required'];
    }

    /**
     * Sets customer_types_required
     *
     * @param \OpenAPI\Client\Model\BookingCustomerType[] $customer_types_required customer_types_required
     *
     * @return $this
     */
    public function setCustomerTypesRequired($customer_types_required)
    {
        $this->container['customer_types_required'] = $customer_types_required;

        return $this;
    }

    /**
     * Gets availability
     *
     * @return \OpenAPI\Client\Model\Availability
     */
    public function getAvailability()
    {
        return $this->container['availability'];
    }

    /**
     * Sets availability
     *
     * @param \OpenAPI\Client\Model\Availability $availability availability
     *
     * @return $this
     */
    public function setAvailability($availability)
    {
        $this->container['availability'] = $availability;

        return $this;
    }

    /**
     * Gets price
     *
     * @return \OpenAPI\Client\Model\Price
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param \OpenAPI\Client\Model\Price $price price
     *
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets confirmation_url
     *
     * @return string|null
     */
    public function getConfirmationUrl()
    {
        return $this->container['confirmation_url'];
    }

    /**
     * Sets confirmation_url
     *
     * @param string|null $confirmation_url confirmation_url
     *
     * @return $this
     */
    public function setConfirmationUrl($confirmation_url)
    {
        $this->container['confirmation_url'] = $confirmation_url;

        return $this;
    }

    /**
     * Gets booking_info
     *
     * @return map[string,string]|null
     */
    public function getBookingInfo()
    {
        return $this->container['booking_info'];
    }

    /**
     * Sets booking_info
     *
     * @param map[string,string]|null $booking_info Relevant info for the Booking, like pickup details, map link, time etc, in Key->Value format
     *
     * @return $this
     */
    public function setBookingInfo($booking_info)
    {
        $this->container['booking_info'] = $booking_info;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


